var N = null;var searchIndex = {};
searchIndex["rust_algorithm_club"]={"doc":"Rust algorithm club.","items":[[0,"sorting","rust_algorithm_club","Sorting algorithms.",N,N],[5,"bubble_sort","rust_algorithm_club::sorting","Bubble sort",N,N],[5,"bubble_sort_optimized","","Optimized bubble sort",N,N],[5,"insertion_sort","","Insertion sort.",N,N],[5,"binary_insertion_sort","","Binary insertion sort.",N,N],[5,"selection_sort","","Selection sort.",N,N],[5,"shellsort","","Shellsort",N,N],[5,"mergesort","","Mergesort.",N,N],[5,"mergesort_bottom_up","","Mergesort bottom-up version.",N,N],[5,"heapsort","","Heapsort.",N,N],[5,"quicksort","","Quicksort with Lomuto parition scheme.",N,N],[5,"quicksort_optimized","","Tail-call opitimized quicksort with Lomuto parition scheme.",N,N],[5,"quicksort_manual_tco","","Manual tail-call opitimized quicksort with Lomuto parition scheme.",N,N],[5,"quicksort_3way","","Quicksort with 3-way parition scheme.",N,N],[5,"quicksort_hoare","","Quicksort with Hoare parition scheme",N,N],[5,"bucket_sort","","Bucket sort",N,N],[5,"counting_sort","","Counting sort",N,N],[5,"radix_sort","","Radix sort for sorting unsigned integers.",N,N],[5,"timsort","","Timsort.",N,N],[5,"introsort","","Introsort.",N,N],[5,"pdqsort","","Pattern-defeating quicksort.",N,N],[17,"MARCIN_GAPS","","Marcin Ciura's gap sequence.",N,N],[0,"collections","rust_algorithm_club","Collections.",N,N],[3,"SinglyLinkedList","rust_algorithm_club::collections","A singly-linked list with owned nodes.",N,N],[3,"HashMap","","A hash map implemented with separate chaining collision resolution strategy.",N,N],[11,"new","","Constructs a new, empty `SinglyLinkedList<T>`.",0,[[],["self"]]],[11,"push_front","","Prepends the given element value to the beginning of the container.",0,[[["self"],["t"]]]],[11,"pop_front","","Removes and returns the first element of the container. If there are no elements in the container, return `None`.",0,[[["self"]],["option"]]],[11,"insert_after","","Inserts an element after the specified position in the container.",0,[[["self"],["usize"],["t"]],["result",["usize"]]]],[11,"remove","","Removes and returns an element at specified position from the container.",0,[[["self"],["usize"]],["option"]]],[11,"clear","","Removes all elements from the container.",0,[[["self"]]]],[11,"is_empty","","Checks whether the container is empty.",0,[[["self"]],["bool"]]],[11,"len","","Gets the number of elements in the container.",0,[[["self"]],["usize"]]],[11,"reverse","","Reverses the order of the elements in the container.",0,[[["self"]]]],[11,"iter","","Creates a iterator that yields immutable refernce of each element.",0,[[["self"]],["iter"]]],[11,"iter_mut","","Creates a iterator that yields mutable refernce of each element.",0,[[["self"]],["itermut"]]],[11,"new","","Creates an empty map with capacity 0.",1,[[],["self"]]],[11,"with_capacity","","Creates a map with a given capacity as the number of underlying buckets.",1,[[["usize"]],["self"]]],[11,"get","","Gets a reference to the value under the specified key.",1,[[["self"],["k"]],["option"]]],[11,"get_mut","","Gets a mutable reference to the value under the specified key.",1,[[["self"],["k"]],["option"]]],[11,"insert","","Inserts key-value pair into the map. Replaces previous value if the same key exists at the same index.",1,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a pair with specified key.",1,[[["self"],["k"]],["option"]]],[11,"clear","","Removes all key-value pairs but keeps the allocated memory for reuse.",1,[[["self"]]]],[11,"is_empty","","Checks whether the container is empty.",1,[[["self"]],["bool"]]],[11,"len","","Gets the number of key-value pairs in the container.",1,[[["self"]],["usize"]]],[11,"bucket_count","","Gets the number of underlying buckets.",1,[[["self"]],["usize"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the list (from start to end). The list cannot be used after calling this.",0,N],[11,"drop","","",0,[[["self"]]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"SinglyLinkedList"],[3,"HashMap"]]};
initSearch(searchIndex);
